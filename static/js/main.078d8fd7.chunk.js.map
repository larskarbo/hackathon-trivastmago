{"version":3,"sources":["hotel.png","1.png","api.class.js","ripple.gif","2.png","3.png","Hotspot.js","Chart.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","AWS","require","axios","API","API_KEY","Object","_Users_lars_dev_inside_trivas_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_3__","this","fetchManifest","manifest","api","create","baseURL","concat","ApiGatewayRootUrl","headers","x-api-key","credentials","get","data","username","password","method","url","userName","response","defaults","common","token","identityId","config","region","Region","CognitoIdentityCredentials","IdentityPoolId","IdentityPool","Logins","_Users_lars_dev_inside_trivas_node_modules_babel_runtime_helpers_esm_defineProperty__WEBPACK_IMPORTED_MODULE_0__","UserPool","getPromise","options","Component","AWSMqtt","default","myApi","IOT_ENDPOINT","AWS_REGION","USERNAME","PASSWORD","hahaha","loldrit","addData","timestamp","_this","chartman","labels","length","console","log","shift","datasets","push","moment","locale","format","forEach","dataset","i","update","main","_callee","cognitoIdentity","oneHourAgo","result","MQTTClient","regenerator_default","a","wrap","_context","prev","next","init","login","createCognitoIdentity","sent","Date","setHours","getHours","invoke","query","size","bool","filter","range","gte","lte","term","thingName","hits","r","dust","_source","state","accessKeyId","secretAccessKey","sessionToken","endpointAddress","maximumReconnectTimeMs","protocol","on","e","error","topic","message","mesh","JSON","parse","toString","setInterval","Math","random","setTimeout","subscribe","t0","stop","ctx","c","getContext","Chart","type","cubicInterpolationMode","label","backgroundColor","borderColor","borderWidth","scales","yAxes","ticks","beginAtZero","_this2","react_default","createElement","ref","width","height","App","className","style","position","src","hotel","ripple","left","top","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.078d8fd7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/hotel.c02a22e0.png\";","module.exports = __webpack_public_path__ + \"static/media/1.b09e75e9.png\";","\nconst AWS = require('aws-sdk');\nconst axios = require('axios');\n\n/* Config.\n * For the curious ones: These config variables are not some\n * magical values that appear from thin air. Each MIC instance\n * has a \"manifest\", which is a JSON object containing non-static\n * service configurations. In a real-world case the application\n * would either load the manifest at launch or save it locally\n * for later usage.\n *\n * The static endpoint for retrieving a MIC manifest is:\n *\n *   https://1u31fuekv5.execute-api.eu-west-1.amazonaws.com/prod/manifest/?hostname=<MIC hostname>\n *\n * E.g. for Start IoT:\n *\n *   https://1u31fuekv5.execute-api.eu-west-1.amazonaws.com/prod/manifest/?hostname=startiot.mic.telenorconnexion.com&\n */\nconst STACK_HOST = 'startiot.mic.telenorconnexion.com';\n\nexport default class API {\n  constructor (API_KEY) {\n    this.API_KEY = API_KEY\n  }\n\n  async init () {\n    try {\n      this.manifest = await this.fetchManifest();\n\n      // Create an Axios instance\n      this.api = axios.create({\n        baseURL: `${this.manifest.ApiGatewayRootUrl}/prod`,\n        headers: {\n          // Attach required 'x-api-key' header with every request\n          'x-api-key': this.API_KEY\n        }\n      });\n      this.credentials = null;\n      this.AWS = AWS;\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async fetchManifest () {\n    try {\n      const { data } = await axios.get(`https://1u31fuekv5.execute-api.eu-west-1.amazonaws.com/prod/manifest/?hostname=${STACK_HOST}`);\n      return data;\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async login ({ username, password }) {\n    try {\n      let response = await this.api({\n        method: 'post',\n        url: '/auth/login',\n        data: {\n          userName: username,\n          password: password\n        }\n      });\n      this.credentials = response.data.credentials;\n\n      // Add credentials headers for consecutive API calls\n      this.api.defaults.headers.common['Authorization'] = this.credentials.token;\n      this.api.defaults.headers.common['identityId'] = this.credentials.identityId;\n\n      return true;\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  async createCognitoIdentity (token) {\n    try {\n      this.AWS.config.region = this.manifest.Region\n      this.AWS.config.credentials = new AWS.CognitoIdentityCredentials({\n        IdentityPoolId: this.manifest.IdentityPool,\n        Logins: {\n          [`cognito-idp.${this.manifest.Region}.amazonaws.com/${this.manifest.UserPool}`]: token\n        }\n      })\n      await this.AWS.config.credentials.getPromise()\n\n      return this.AWS.config.credentials\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  logout () {\n    // Clear credentials and headers\n    this.credentials = null;\n    this.api.defaults.headers.common['Authorization'] = null;\n    this.api.defaults.headers.common['identityId'] = null;\n  }\n\n  async invoke (options) {\n    try {\n      // Pipe options to the Axios instance\n      return await this.api(options);\n    } catch (e) {\n      // TODO: refresh token if expired and retry\n      throw e;\n    }\n  }\n}\n","module.exports = __webpack_public_path__ + \"static/media/ripple.102ff033.gif\";","module.exports = __webpack_public_path__ + \"static/media/2.0250b574.png\";","module.exports = __webpack_public_path__ + \"static/media/3.2c2e3c81.png\";","import React, { Component } from 'react';\n\nclass Hotspot extends Component {\n  render() {\n    return (\n      <div class=\"lds-css ng-scope\" style={{\n        width: 100,\n        height: 100\n      }}>\n        <div style={{\n        width: '100%',\n        height: '100%'\n        }} class=\"lds-ripple\">\n          <div></div>\n          <div></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Hotspot;\n","import React, { Component } from 'react';\nimport Chart from 'chart.js';\nimport moment from 'moment'\nconst AWSMqtt = require('aws-mqtt-client').default\nconst API = require('./api.class.js').default\nconst myApi = new API('oy0yDJfZdQkQ52LLCugD6IQNiC8l1Xcacm89kg44')\n\n// Insert variables\nconst IOT_ENDPOINT = 'a3k7odshaiipe8-ats.iot.eu-west-1.amazonaws.com'\nconst AWS_REGION = 'eu-west-1'\nconst USERNAME = 'elsyshack'\nconst PASSWORD = '12ElsyShacK!'\n\n\nlet hahaha = 0\n\n\nclass loldrit extends Component {\n  componentDidMount() {\n    var ctx = this.c.getContext('2d');\n    this.chartman = new Chart(ctx, {\n      type: 'line',\n      cubicInterpolationMode: 'monotone',\n      data: {\n        labels: [],\n        datasets: [{\n          label: 'Rom 312',\n          data: [],\n          backgroundColor: [\n            'rgba(255, 99, 132, 0.2)',\n            'rgba(54, 162, 235, 1)',\n            'rgba(255, 206, 86, 0.2)',\n            'rgba(75, 192, 192, 0.2)',\n            'rgba(153, 102, 255, 0.2)',\n            'rgba(255, 159, 64, 0.2)'\n          ],\n          borderColor: [\n            'rgba(255,99,132,1)',\n            'rgba(54, 162, 235, 1)',\n            'rgba(255, 206, 86, 1)',\n            'rgba(75, 192, 192, 1)',\n            'rgba(153, 102, 255, 1)',\n            'rgba(255, 159, 64, 1)'\n          ],\n          borderWidth: 2\n        }]\n      },\n      options: {\n        scales: {\n          yAxes: [{\n            ticks: {\n              beginAtZero: true\n            }\n          }]\n        }\n      }\n    });\n    // Invoke our program\n    this.main()\n\n   \n\n\n  }\n\n  addData = (data, timestamp) => {\n    if (this.chartman.data.labels.length > 30) {\n      console.log('this.chartman.data.labels.length: ', this.chartman.data.labels.length);\n      this.chartman.data.labels.shift()\n      this.chartman.data.datasets[0].data.shift()\n      // this.chartman.data.datasets[1].data.shift()\n    }\n    this.chartman.data.labels.push(moment(timestamp).locale('no-nb').format('LT'));\n    this.chartman.data.datasets.forEach((dataset, i) => {\n      if (i == 0) {\n        dataset.data.push(data);\n      } else {\n        if (hahaha === 0) {\n          dataset.data.push(data);\n          \n        } else {\n\n          dataset.data.push(dataset.data[dataset.data.length - 1]);\n        }\n        hahaha += 1\n        if (hahaha > 4) {\n          hahaha = 0\n        }\n      }\n    });\n    this.chartman.update();\n  }\n\n  main = async () => {\n    try {\n      await myApi.init() // Init API (fetch Manifest)\n      await myApi.login({\n        username: USERNAME,\n        password: PASSWORD\n      })\n\n      // Create a Cognito Identity before authorizing MQTT client\n      const cognitoIdentity = await myApi.createCognitoIdentity(myApi.credentials.token)\n\n      var oneHourAgo = new Date();\n\n      oneHourAgo.setHours(oneHourAgo.getHours() - 1);\n      let result = await myApi.invoke({\n        method: 'post',\n        url: '/observations/find',\n        data: {\n          query: {\n            size: 100,\n            query: {\n              bool: {\n                filter: [\n                  {\n                    range: {\n                      timestamp: {\n                        gte: oneHourAgo,\n                        lte: new Date()\n                      }\n                    }\n                  },\n                  {\n                    term: {\n                      thingName: '00001648' // Replace 00001570 with your Thing Type ID\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        }\n      })\n      console.log(result.data.hits.hits)\n\n      result.data.hits.hits.forEach(r => {\n        const dust = r._source.state.dust\n        const timestamp = r._source.state.timestamp\n\n        this.addData(dust, timestamp)\n      })\n\n\n\n      // Instantiate a new MQTT client with configurations\n      let MQTTClient = new AWSMqtt({\n        region: AWS_REGION,\n        accessKeyId: cognitoIdentity.accessKeyId,\n        secretAccessKey: cognitoIdentity.secretAccessKey,\n        sessionToken: cognitoIdentity.sessionToken,\n        endpointAddress: IOT_ENDPOINT,\n        maximumReconnectTimeMs: 8000,\n        protocol: 'wss'\n      })\n      // If an error occurs\n      MQTTClient.on('error', e => {\n        console.error('MQTT error:', e)\n      })\n\n      // If a reconnect happens\n      MQTTClient.on('reconnect', () => {\n        console.error('MQTT reconnect, check topic')\n      })\n\n      // Incoming message\n      MQTTClient.on('message', (topic, message) => {\n        const mesh = JSON.parse(message.toString('utf-8'))\n        console.log('mesh: ', mesh);\n        // this.addData(mesh.state.reported.dust, mesh.state.reported.timestamp)\n      })\n\n      setInterval(() => {\n        this.addData((Math.random() * 700) + 300, new Date())\n      }, 6000)\n\n      setTimeout(() => {\n        this.addData((Math.random() * 400) + 400, new Date())\n      }, 3000)\n\n      // Subscribe to a topic after connect\n      MQTTClient.on('connect', () => {\n        console.log('connect')\n        MQTTClient.subscribe('thing-update/elsyshack/00001648')\n      })\n    } catch (e) {\n      console.error('An error occured:', e)\n    }\n\n\n  }\n\n\n  render() {\n    return (\n      <div>\n        <canvas ref={(c) => { this.c = c }} width=\"400\" height=\"400\"></canvas>\n      </div>\n    );\n  }\n}\n\nexport default loldrit;\n","import React, { Component } from 'react';\nimport './static/css/style.css';\nimport one from './1.png'\nimport Hotspot from './Hotspot'\nimport Chart from './Chart'\nimport two from './2.png'\nimport ripple from './ripple.gif'\nimport three from './3.png'\nimport hotel from './hotel.png'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"wrap\">\n          <div className=\"inwrap\">\n            <div>\n            <h1 className=\"tow\">\n                <span className=\"red\">triv</span><span className=\"two\">astma</span><span className=\"third\">go</span> insights™\n            </h1>\n              <p>Hei, Petter Stordalen! Her har du en oversikt over ditt hotell</p>\n              <div\n                style={{\n                  position:'relative'\n                }}\n              >\n                <img src={hotel} />\n                <img src={ripple} style={{\n                  position: 'absolute',\n                  width: '100px',\n                  left: 180,\n                  top: 170\n                }} />\n                <img src={ripple} style={{\n                  position: 'absolute',\n                  width: '100px',\n                  left: 380,\n                  top: 170\n                }} />\n                <img src={ripple} style={{\n                  position: 'absolute',\n                  width: '100px',\n                  left: 420,\n                  top: 150\n                }} />\n\n                <img src={ripple} style={{\n                  position: 'absolute',\n                  width: '100px',\n                  left: 460,\n                  top: 130\n                }} />\n                <img src={ripple} style={{\n                  position: 'absolute',\n                  width: '100px',\n                  left: 600,\n                  top: 80\n                }} />\n              </div>\n              <Chart />\n            </div>\n\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}